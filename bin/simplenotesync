#!/usr/bin/env perl

# PODNAME: simplenotesync

use v5.10;
use strict;
use warnings;
use App::SimplenoteSync;
use File::BaseDir;
use Getopt::Long qw/:config no_ignore_case bundling/;
use Pod::Usage;
use Config::INI::Reader;
use Log::Dispatch;
use Log::Any::Adapter;
use YAML::Any;

my $logger;

our $PROGNAME = 'simplenotesync';

my $opt = {};

sub get_opts {
    my $getopt = GetOptions( $opt, 'help|h', 'man', 'debug|d!', 'version|v',
        'allow_server_updates!', 'allow_local_updates!', 'email=s', 'password=s', 'quiet|q!' );

    if ( $getopt == 0 or defined $opt->{help} ) {
        pod2usage;
    }

    if ( defined $opt->{version} ) {
        printf "%s version %s [using WebService::Simplenote %s]\n", $PROGNAME,
          $App::SimplenoteSync::VERSION, $WebService::Simplenote::VERSION;
        exit;
    }

    if ( defined $opt->{man} ) {
        pod2usage(-verbose => 2);
    }
    return 1;
}

sub get_logger {

    my $log_level = 'info';
    if ( $opt->{debug} ) {
        $log_level = 'debug';
    }

    # TODO interactive/background
    $logger = Log::Dispatch->new(
        outputs => [
            
            [
                'Syslog',
                min_level => $log_level,
                ident     => $PROGNAME,
            ],
        ],
    );

    if (!$opt->{quiet}) {
        require Log::Dispatch::Screen::Color;
        $logger->add(
            Log::Dispatch::Screen::Color->new(
                min_level => 'info', 
                newline   => 1,
        ));
    }
    
    if ( $opt->{debug} ) {
        require Log::Dispatch::File;
        require DateTime;
        my $sub = sub {
            my %p   = @_;
            my $dt  = DateTime->now;
            my $str = sprintf '%s::%s::%s', $dt->iso8601, uc $p{level}, $p{message};
            return $str;
        };

        $logger->add(
            Log::Dispatch::File->new(
                name      => 'debug_file',
                min_level => 'debug',
                filename  => $PROGNAME . '_debug.log',
                newline   => 1,
                callbacks => $sub,
            )
        );
    }

    Log::Any::Adapter->set( 'Dispatch', dispatcher => $logger );
}

sub get_config {
    my $conf_dir  = Path::Class::Dir->new( File::BaseDir->config_home );
    my $conf_file = $conf_dir->file("$PROGNAME.ini");
    $logger->debug("Reading config from $conf_file");
    my $config = Config::INI::Reader->read_file($conf_file);

    # merge config opts - cli opts take precedence
    foreach my $key ( keys %{ $config->{_} } ) {
        if ( !exists $opt->{$key} ) {
            $opt->{$key} = $config->{_}->{$key};
        }
    }

    if ( !$opt->{debug} ) {
        return;
    }

    $logger->debug('======= Options ========');
    foreach my $key ( keys %$opt ) {
        my $value = $opt->{$key};
        if ( $key eq 'password' ) {
            $value = '******';
        }
        $logger->debug("$key: [$value]");
    }
    $logger->debug('===== End Options ======');
    return;
}

get_opts;
get_logger;
get_config;

my $app = App::SimplenoteSync->new($opt);

my $notes = $app->sync_notes;

$app->sync_report;

__END__

=head1 SYNOPSIS
 
simplenotesync [options] [pathname]
 
 Options:
   --help     -h           brief help message
   --man                   full documentation
   --version -v            display program and library version
   --debug   -d            write debug output to a logfile in current dir
   --quiet   -q            log nothing
   --email                 email used for simplenote account
   --password              password used for simplenote account
   --allow_server_updates  don't modify notes on server
   --allow_local_updates   don't modify notes locally

  [pathname] is the local notes folder to syncronise with.
  
  Everything is optional and can be specified in the config file. See manual.
  
=head1 DESCRIPTION

After specifying a folder to store local text files, and the email address and
password associated with your Simplenote account, C<simplenotesync> will attempt
to synchronize the information in both places.

=head1 WARNING

Please note that this software is still in development stages --- I STRONGLY
urge you to backup all of your data before running to ensure nothing is lost.
If you run C<simplenotesync> on an empty local folder without the net result will 
be to copy the remote notes to the local folder, effectively performing a backup.

=head1 CONFIGURATION

TODO x-platform!

C<simplenotesync> can optionally use a config file. Create a file called 
F<simplenotesync.ini> in your config dir, usually /~.config.

It is an ini file, supporting the following keys:
  
  email, password, allow_server_updates, allow_local_updates

=head1 KNOWN ISSUES

=over

=item

it's probably not very efficient and might really bog down with large numbers of notes

=item 

renaming notes or text files causes it to be treated as a new note;
probably not all bad, but not sure what else to do. For now, you'll have to
manually delete the old copy

=back

=head1 FAQ

=over

=item B<Why can I download notes from Simplenote, but local notes aren't being uploaded?>

Do the text files end in ".txt"? For documents to be recognized as text files
to be uploaded, they have to have that file extension. *Unless* you have
specified an alternate file extension to use in ".simplenotesyncrc".

Text files can't be located in subdirectories - this script does not (by
design) recurse folders looking for files (since they shouldn't be anywhere
but the specified directory).

=item B<When my note is downloaded from Simplenote and then changed locally, I end
  up with two copies of the first line (one shorter than the other) - what gives?>

If the first line of a note is too long to become the filename, it is trimmed
to an appropriate length. To prevent losing data, the full line is preserved
in the body. Since Simplenote doesn't have a concept of titles, the title
becomes the first line (which is trimmed), and the original first line is now
the third line (counting the blank line in between). Your only alternatives
are to shorten the first line, split it in two, or to create a short title

=item B<If I rename a note, what happens?>

If you rename a note on Simplenote by changing the first line, a new text file
will be created and the old one will be deleted, preserving the original
creation date. If you rename a text file locally, the old note on Simplenote
will be deleted and a new one will be created, again preserving the original
creation date. In the second instance, there is not actually any recognition
of a "rename" going on - simply the recognition that an old note was deleted
and a new one exists.

=back

=head1 SEE ALSO

Designed for use with Simplenote:

<http://www.simplenoteapp.com/>

Based on SimplenoteSync:

<http://fletcherpenney.net/other_projects/simplenotesync/>
