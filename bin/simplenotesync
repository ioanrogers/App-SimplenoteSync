#!/usr/bin/env perl

# PODNAME: simplenotesync

use v5.10;
use strict;
use warnings;
use Webservice::SimpleNote;
use File::BaseDir;
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use Config::INI::Reader;
use Log::Dispatch;
use Log::Any::Adapter;
use YAML::Any;

my $logger;

our $PROGNAME = 'simplenotesync';

my $opt = {};

sub get_opts {
    my $getopt = GetOptions(
        $opt,                    'help|h',
        'longhelp|H',            'debug|d!',
        'trial|t!',              'version|v',
        'allow_server_updates!', 'allow_local_updates!',
        'email=s',
        'password=s'
    );

    if ( $getopt == 0 or defined $opt->{help} ) {
        pod2usage;
    }

    if ( defined $opt->{version} ) {
        say "$PROGNAME version $Webservice::SimpleNote::VERSION";
        exit;
    }

    if ( $getopt == 0 or defined $opt->{longhelp} ) {
        pod2usage 1;
    }
    return 1;
}

sub get_logger {

    my $log_level = 'info';
    if ( $opt->{debug} ) {
        $log_level = 'debug';
    }

    # TODO interactive/background
    $logger = Log::Dispatch->new(
        outputs => [
            [
                'Screen::Color',
                min_level => $log_level,
                newline   => 1,
            ],
            [
                'Syslog',
                min_level => $log_level,
                ident     => $PROGNAME,
            ],
        ],
    );

    if ( $opt->{debug} ) {
        require Log::Dispatch::File;
        require DateTime;
        my $sub = sub {
            my %p   = @_;
            my $dt  = DateTime->now;
            my $str = sprintf '%s::%s::%s', $dt->iso8601, uc $p{level}, $p{message};
            return $str;
        };

        $logger->add(
            Log::Dispatch::File->new(
                name      => 'debug_file',
                min_level => 'debug',
                filename  => $PROGNAME . '_debug.log',
                newline   => 1,
                callbacks => $sub,
            )
        );
    }

    Log::Any::Adapter->set( 'Dispatch', dispatcher => $logger );
}

sub get_config {
    my $conf_dir  = Path::Class::Dir->new( File::BaseDir->config_home );
    my $conf_file = $conf_dir->file("$PROGNAME.ini");
    $logger->debug("Reading config from $conf_file");
    my $config = Config::INI::Reader->read_file($conf_file);

    if (!$opt->{sync_db}) {
        $opt->{sync_db} = Path::Class::File->new( File::BaseDir->cache_home("$PROGNAME.yaml") );
    }
    
    # merge config opts - cli opts take precedence
    foreach my $key ( keys %{ $config->{_} } ) {
        if ( !exists $opt->{$key} ) {
            $opt->{$key} = $config->{_}->{$key};
        }
    }

    if ( !$opt->{debug} ) {
        return;
    }

    $logger->debug('======= Options ========');
    foreach my $key ( keys %$opt ) {
        my $value = $opt->{$key};
        if ( $key eq 'password' ) {
            $value = '***REDACTED***';
        }
        $logger->debug("$key: [$value]");
    }
    $logger->debug('===== End Options ======');
}

get_opts;
get_logger;
get_config;

my $simplenote = Webservice::SimpleNote->new($opt);

# Do Synchronization
$simplenote->sync_notes;

__END__

=head1 DESCRIPTION

After specifying a folder to store local text files, and the email address and
password associated with your Simplenote account, SimplenoteSync will attempt
to synchronize the information in both places.

Sync information is stored in "simplenotesync.db". If this file is lost,
SimplenoteSync will have to attempt to look for "collisions" between local
files and existing notes. When performing the first synchronization, it's best
to start with an empty local folder (or an empty collection of notes on
Simplenote), and then start adding files (or notes) afterwards.

=head1 WARNING

Please note that this software is still in development stages --- I STRONGLY
urge you to backup all of your data before running to ensure nothing is lost.
If you run SimplenoteSync on an empty local folder without a
"simplenotesync.db" file, the net result will be to copy the remote notes to
the local folder, effectively performing a backup.

=head1 KNOWN ISSUES

* it's probably not very efficient and might really bog down with large
  numbers of notes

* renaming notes or text files causes it to be treated as a new note -
  probably not all bad, but not sure what else to do. For now, you'll have to
  manually delete the old copy

=head1 FAQ

* Why can I download notes from Simplenote, but local notes aren't being
  uploaded?

=over

Do the text files end in ".txt"? For documents to be recognized as text files
to be uploaded, they have to have that file extension. *Unless* you have
specified an alternate file extension to use in ".simplenotesyncrc".

Text files can't be located in subdirectories - this script does not (by
design) recurse folders looking for files (since they shouldn't be anywhere
but the specified directory).

=back

* When my note is downloaded from Simplenote and then changed locally, I end
  up with two copies of the first line (one shorter than the other) - what
  gives?

=over

If the first line of a note is too long to become the filename, it is trimmed
to an appropriate length. To prevent losing data, the full line is preserved
in the body. Since Simplenote doesn't have a concept of titles, the title
becomes the first line (which is trimmed), and the original first line is now
the third line (counting the blank line in between). Your only alternatives
are to shorten the first line, split it in two, or to create a short title

=back

* If I rename a note, what happens?

=over

If you rename a note on Simplenote by changing the first line, a new text file
will be created and the old one will be deleted, preserving the original
creation date. If you rename a text file locally, the old note on Simplenote
will be deleted and a new one will be created, again preserving the original
creation date. In the second instance, there is not actually any recognition
of a "rename" going on - simply the recognition that an old note was deleted
and a new one exists.

=back

